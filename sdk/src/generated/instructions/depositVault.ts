/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DepositVault
 * @category generated
 */
export type DepositVaultInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category DepositVault
 * @category generated
 */
export const depositVaultStruct = new beet.BeetArgsStruct<
  DepositVaultInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'DepositVaultInstructionArgs'
)
/**
 * Accounts required by the _depositVault_ instruction
 *
 * @property [_writable_] vault
 * @property [_writable_] vaultTokenAccount
 * @property [] mint
 * @property [_writable_] payerTokenAccount
 * @property [_writable_, **signer**] payer
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category DepositVault
 * @category generated
 */
export type DepositVaultInstructionAccounts = {
  vault: web3.PublicKey
  vaultTokenAccount: web3.PublicKey
  mint: web3.PublicKey
  payerTokenAccount: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const depositVaultInstructionDiscriminator = [
  126, 224, 21, 255, 228, 53, 117, 33,
]

/**
 * Creates a _DepositVault_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DepositVault
 * @category generated
 */
export function createDepositVaultInstruction(
  accounts: DepositVaultInstructionAccounts,
  args: DepositVaultInstructionArgs,
  programId = new web3.PublicKey('ATVixC5VzQYwU9FB2NQgzQ6yp7jxz4XYsJLvkqMQQgEV')
) {
  const [data] = depositVaultStruct.serialize({
    instructionDiscriminator: depositVaultInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vaultTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
