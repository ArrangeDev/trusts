/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * WrongVaultAuthority: 'Attempting to withdraw from vault with account that is not the authority'
 *
 * @category Errors
 * @category generated
 */
export class WrongVaultAuthorityError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'WrongVaultAuthority'
  constructor() {
    super(
      'Attempting to withdraw from vault with account that is not the authority'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongVaultAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new WrongVaultAuthorityError())
createErrorFromNameLookup.set(
  'WrongVaultAuthority',
  () => new WrongVaultAuthorityError()
)

/**
 * TargetAccountInvalid: 'The target account provided is invalid'
 *
 * @category Errors
 * @category generated
 */
export class TargetAccountInvalidError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'TargetAccountInvalid'
  constructor() {
    super('The target account provided is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TargetAccountInvalidError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new TargetAccountInvalidError())
createErrorFromNameLookup.set(
  'TargetAccountInvalid',
  () => new TargetAccountInvalidError()
)

/**
 * MintNotSupported: 'This mint is not current supported'
 *
 * @category Errors
 * @category generated
 */
export class MintNotSupportedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'MintNotSupported'
  constructor() {
    super('This mint is not current supported')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintNotSupportedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new MintNotSupportedError())
createErrorFromNameLookup.set(
  'MintNotSupported',
  () => new MintNotSupportedError()
)

/**
 * TooManyTargets: 'Max targets specifiable is 5.'
 *
 * @category Errors
 * @category generated
 */
export class TooManyTargetsError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'TooManyTargets'
  constructor() {
    super('Max targets specifiable is 5.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooManyTargetsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new TooManyTargetsError())
createErrorFromNameLookup.set('TooManyTargets', () => new TooManyTargetsError())

/**
 * PercentageTooSmall: 'Percentage is under the minimum'
 *
 * @category Errors
 * @category generated
 */
export class PercentageTooSmallError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'PercentageTooSmall'
  constructor() {
    super('Percentage is under the minimum')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PercentageTooSmallError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new PercentageTooSmallError())
createErrorFromNameLookup.set(
  'PercentageTooSmall',
  () => new PercentageTooSmallError()
)

/**
 * PercentageTooLarge: 'Percentage is over 100%'
 *
 * @category Errors
 * @category generated
 */
export class PercentageTooLargeError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'PercentageTooLarge'
  constructor() {
    super('Percentage is over 100%')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PercentageTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new PercentageTooLargeError())
createErrorFromNameLookup.set(
  'PercentageTooLarge',
  () => new PercentageTooLargeError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
